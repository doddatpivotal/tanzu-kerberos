#! The following ClusterConfigTemplate was adapted from TAP 1.3 OOTB Supply Chain Basic's convention-template
#! kubectl get clusterconfigtemplate convention-template -oyaml > supply-chain/kerberos-convention-template.yaml

#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")

#@overlay/match by=overlay.subset({"kind":"ClusterConfigTemplate", "metadata": {"name":"convention-template-kerberos"}}),expects="1+"
---
spec:
  #@overlay/replace via=lambda left, right: left.replace("{{BASE_KERBEROS_RUN_IMAGE}}", data.values.sidecar.image).replace("{{AD_HOST}}", data.values.ad.host)
  ytt: noop

---
apiVersion: carto.run/v1alpha1
kind: ClusterConfigTemplate
metadata:
  name: convention-template-kerberos
spec:
  configPath: .status.template
  healthRule:
    singleConditionType: Ready
  params:
  - default: default
    name: serviceAccount
  ytt: |
    #@ load("@ytt:data", "data")

    #@ def param(key):
    #@   if not key in data.values.params:
    #@     return None
    #@   end
    #@   return data.values.params[key]
    #@ end

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def build_fixed_annotations():
    #@   fixed_annotations = { "developer.conventions/target-containers": "workload" }
    #@   if param("debug"):
    #@     fixed_annotations["apps.tanzu.vmware.com/debug"] = param("debug")
    #@   end
    #@   if param("live-update"):
    #@     fixed_annotations["apps.tanzu.vmware.com/live-update"] = param("live-update")
    #@   end
    #@   return fixed_annotations
    #@ end

    #@ def merge_annotations(fixed_values):
    #@   annotations = {}
    #@   if hasattr(data.values.workload.metadata, "annotations"):
    #@     # DEPRECATED: remove in a future release
    #@     annotations.update(data.values.workload.metadata.annotations)
    #@   end
    #@   if type(param("annotations")) == "dict" or type(param("annotations")) == "struct":
    #@     annotations.update(param("annotations"))
    #@   end
    #@   annotations.update(fixed_values)
    #@   return annotations
    #@ end

    apiVersion: conventions.carto.run/v1alpha1
    kind: PodIntent
    metadata:
      name: #@ data.values.workload.metadata.name
      labels: #@ merge_labels({ "app.kubernetes.io/component": "intent" })
    spec:
      serviceAccountName: #@ data.values.params.serviceAccount
      template:
        metadata:
          annotations: #@ merge_annotations(build_fixed_annotations())
          labels: #@ merge_labels({ "app.kubernetes.io/component": "run", "carto.run/workload-name": data.values.workload.metadata.name })
        spec:
          serviceAccountName: #@ data.values.params.serviceAccount
          containers:
            - name: workload
              image: #@ data.values.image
              ports:
                - containerPort: 8080
              securityContext:
                runAsUser: 1000
              env:
                - name: KRB5_CONFIG
                  value: /krb/krb5.conf
                - name: KRB5CCNAME
                  value: /krb/krb5cc
                - name: KRB5_KTNAME
                  value: /krb/service.keytab
                - name: KRB5_CLIENT_KTNAME
                  value: /krb/service.keytab
              #@ if hasattr(data.values.workload.spec, "env"):
                #@ for var in data.values.workload.spec.env:
                - name: #@ var.name
                  #@ if/end hasattr(var, "value"):
                  value: #@ var.value
                  #@ if/end hasattr(var, "valueFrom"):
                  valueFrom: #@ var.valueFrom
                #@ end
              #@ end
              #@ if/end hasattr(data.values.workload.spec, "resources"):
              resources: #@ data.values.workload.spec["resources"]
              volumeMounts:
              - name: krb-app
                mountPath: /krb
            - name: kdc-sidecar
              image: {{BASE_KERBEROS_RUN_IMAGE}}
              resources:
                limits:
                  memory: 100Mi
                  cpu: 100m
                requests:
                  memory: 100Mi
                  cpu: 100m
              env:
              - name: KRB_KDC
                value: {{AD_HOST}}
              - name: KRB_SERVICE_ACCOUNT
                valueFrom:
                  secretKeyRef:
                    name: kerberos-demo-tbs-krb-creds
                    key: username
                    optional: false 
              - name: KRB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: kerberos-demo-tbs-krb-creds
                    key: password
                    optional: false 
              - name: KRB5_CONFIG
                value: /krb/krb5.conf
              - name: KRB5CCNAME
                value: /krb/krb5cc
              - name: KRB5_KTNAME
                value: /krb/service.keytab
              - name: KRB5_CLIENT_KTNAME
                value: /krb/service.keytab
              volumeMounts:
              - name: krb-app
                mountPath: /krb
          volumes:
          - name: krb-app
            emptyDir:
              medium: Memory
